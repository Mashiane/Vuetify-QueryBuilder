{"remainingRequest":"/Users/Tamer/Vuetify-QueryBuilder3/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Tamer/Vuetify-QueryBuilder3/src/components/QueryBuilder.vue?vue&type=template&id=0f0dff3a&","dependencies":[{"path":"/Users/Tamer/Vuetify-QueryBuilder3/src/components/QueryBuilder.vue","mtime":1595443136899},{"path":"/Users/Tamer/Vuetify-QueryBuilder3/node_modules/cache-loader/dist/cjs.js","mtime":1588541276913},{"path":"/Users/Tamer/Vuetify-QueryBuilder3/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588541283263},{"path":"/Users/Tamer/Vuetify-QueryBuilder3/node_modules/vuetify-loader/lib/loader.js","mtime":1585901980231},{"path":"/Users/Tamer/Vuetify-QueryBuilder3/node_modules/cache-loader/dist/cjs.js","mtime":1588541276913},{"path":"/Users/Tamer/Vuetify-QueryBuilder3/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1588541283263}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}